[
  {
    "repo": "Garvit244/Leetcode",
    "file_path": "1091.py",
    "file_name": "1091.py",
    "download_url": "https://raw.githubusercontent.com/Garvit244/Leetcode/master/1091.py",
    "size_bytes": 1654,
    "code": "'''\nIn an N by N square grid, each cell is either empty (0) or blocked (1).\n\nA clear path from top-left to bottom-right has length k if and only if it is composed of cells C_1, C_2, ..., C_k such that:\n\nAdjacent cells C_i and C_{i+1} are connected 8-directionally (ie., they are different and share an edge or corner)\nC_1 is at location (0, 0) (ie. has value grid[0][0])\nC_k is at location (N-1, N-1) (ie. has value grid[N-1][N-1])\nIf C_i is located at (r, c), then grid[r][c] is empty (ie. grid[r][c] == 0).\nReturn the length of the shortest such clear path from top-left to bottom-right.  If such a path does not exist, return -1.\n\n \n\nExample 1:\n\nInput: [[0,1],[1,0]]\nOutput: 2\nExample 2:\n\nInput: [[0,0,0],[1,1,0],[1,1,0]]\nOutput: 4\n \n\nNote:\n\n1 <= grid.length == grid[0].length <= 100\ngrid[r][c] is 0 or 1\n'''\nclass Solution(object):\n    def shortestPathBinaryMatrix(self, grid):\n        \"\"\"\n        :type grid: List[List[int]]\n        :rtype: int\n        \"\"\"\n        if not grid:\n            return -1\n        \n        rows, cols = len(grid), len(grid[0])\n        if grid[0][0] or grid[rows-1][cols-1]:\n            return -1\n        \n        queue = [[0, 0, 1]]\n        for row, col, dist in queue:\n            if row == rows-1 and col == cols-1:\n                return dist\n            for di, dj in [(-1, -1), (0, -1), (-1, 1), (-1, 0), (1, 0), (1, -1), (0, 1), (1, 1)]:\n                n_row, n_col = row + di, col + dj\n                if 0 <= n_row < rows and 0 <= n_col < cols and not grid[n_row][n_col]:\n                    grid[n_row][n_col] = 1\n                    queue.append([n_row, n_col, dist + 1])\n                    \n        return -1\n",
    "cleaned_code": "class Solution(object):\n\n    def shortestPathBinaryMatrix(self, grid):\n        if not grid:\n            return -1\n        rows, cols = (len(grid), len(grid[0]))\n        if grid[0][0] or grid[rows - 1][cols - 1]:\n            return -1\n        queue = [[0, 0, 1]]\n        for row, col, dist in queue:\n            if row == rows - 1 and col == cols - 1:\n                return dist\n            for di, dj in [(-1, -1), (0, -1), (-1, 1), (-1, 0), (1, 0), (1, -1), (0, 1), (1, 1)]:\n                n_row, n_col = (row + di, col + dj)\n                if 0 <= n_row < rows and 0 <= n_col < cols and (not grid[n_row][n_col]):\n                    grid[n_row][n_col] = 1\n                    queue.append([n_row, n_col, dist + 1])\n        return -1"
  },
  {
    "repo": "Garvit244/Leetcode",
    "file_path": "1-100q/03.py",
    "file_name": "03.py",
    "download_url": "https://raw.githubusercontent.com/Garvit244/Leetcode/master/1-100q/03.py",
    "size_bytes": 768,
    "code": "'''\n\tGiven a string, find the length of the longest substring without repeating characters.\n\n\tExamples:\n\n\tGiven \"abcabcbb\", the answer is \"abc\", which the length is 3.\n\n\tGiven \"bbbbb\", the answer is \"b\", with the length of 1.\n\n\tGiven \"pwwkew\", the answer is \"wke\", with the length of 3. Note that the answer must be a substring, \"pwke\" is a subsequence and not a substring.\n'''\n\nclass Solution(object):\n    def lengthOfLongestSubstring(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        mapSet = {}\n        start, result = 0, 0\n\n        for end in range(len(s)):\n        \tif s[end] in mapSet:\n        \t\tstart = max(mapSet[s[end]], start)\n        \tresult = max(result, end-start+1)\n        \tmapSet[s[end]] = end+1\n\n        return result ",
    "cleaned_code": "class Solution(object):\n\n    def lengthOfLongestSubstring(self, s):\n        mapSet = {}\n        start, result = (0, 0)\n        for end in range(len(s)):\n            if s[end] in mapSet:\n                start = max(mapSet[s[end]], start)\n            result = max(result, end - start + 1)\n            mapSet[s[end]] = end + 1\n        return result"
  },
  {
    "repo": "Garvit244/Leetcode",
    "file_path": "1-100q/05.py",
    "file_name": "05.py",
    "download_url": "https://raw.githubusercontent.com/Garvit244/Leetcode/master/1-100q/05.py",
    "size_bytes": 1852,
    "code": "'''\n\tGiven a string s, find the longest palindromic substring in s. You may assume that the maximum length of s is 1000.\n\n\tExample 1:\n\n\tInput: \"babad\"\n\tOutput: \"bab\"\n\tNote: \"aba\" is also a valid answer.\n\tExample 2:\n\n\tInput: \"cbbd\"\n\tOutput: \"bb\"\n'''\n\nclass Solution(object):\n    def longestPalindrome(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        dp = [[0 for _ in range(len(s))] for _ in range(len(s))]\n        maxLength, result = 1, \"\"\n        for index in range(len(s)):\n        \tdp[index][index] = 1\n        \tresult = s[index]\n\n        length = 2\n        \n        while length <= len(s):\n        \tindex_i = 0\n        \twhile index_i < len(s) - length + 1:\n        \t\tindex_j = index_i + length -1\n\n        \t\tif length == 2 and s[index_i] == s[index_j]:\n        \t\t\tdp[index_i][index_j] = 1\n        \t\t\tmaxLength = max(maxLength, 2)\n        \t\t\tresult = s[index_i:index_j+1]\n        \t\telif s[index_i] == s[index_j] and dp[index_i+1][index_j-1]:\n        \t\t\tdp[index_i][index_j] = 1\n        \t\t\tif length > maxLength:\n        \t\t\t\tmaxLength = length\n        \t\t\t\tresult = s[index_i:index_j+1]\n\n        \t\tindex_i += 1\n        \tlength += 1\n\n        return result\n\n# Space: O(N^2)\n# Time: O(N^2)\n\nclass Solution(object):\n    def longestPalindrome(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n\n        def expand(s, left, right):\n        \twhile left >= 0 and right < len(s) and s[left] == s[right]:\n        \t\tleft -= 1\n        \t\tright += 1\n        \treturn right-left-1\n\n        start, end = 0, 0\n        for index in range(len(s)):\n        \teven_len = expand(s, index, index+1)\n        \todd_len = expand(s, index, index)\n        \tlength = max(even_len, odd_len)\n        \tif length > (end-start):\n        \t\tstart = index - (length-1)/2\n        \t\tend = index +length/2\n\n        return s[start:end+1]",
    "cleaned_code": "class Solution(object):\n\n    def longestPalindrome(self, s):\n        dp = [[0 for _ in range(len(s))] for _ in range(len(s))]\n        maxLength, result = (1, '')\n        for index in range(len(s)):\n            dp[index][index] = 1\n            result = s[index]\n        length = 2\n        while length <= len(s):\n            index_i = 0\n            while index_i < len(s) - length + 1:\n                index_j = index_i + length - 1\n                if length == 2 and s[index_i] == s[index_j]:\n                    dp[index_i][index_j] = 1\n                    maxLength = max(maxLength, 2)\n                    result = s[index_i:index_j + 1]\n                elif s[index_i] == s[index_j] and dp[index_i + 1][index_j - 1]:\n                    dp[index_i][index_j] = 1\n                    if length > maxLength:\n                        maxLength = length\n                        result = s[index_i:index_j + 1]\n                index_i += 1\n            length += 1\n        return result\n\nclass Solution(object):\n\n    def longestPalindrome(self, s):\n\n        def expand(s, left, right):\n            while left >= 0 and right < len(s) and (s[left] == s[right]):\n                left -= 1\n                right += 1\n            return right - left - 1\n        start, end = (0, 0)\n        for index in range(len(s)):\n            even_len = expand(s, index, index + 1)\n            odd_len = expand(s, index, index)\n            length = max(even_len, odd_len)\n            if length > end - start:\n                start = index - (length - 1) / 2\n                end = index + length / 2\n        return s[start:end + 1]"
  },
  {
    "repo": "Garvit244/Leetcode",
    "file_path": "1-100q/06.py",
    "file_name": "06.py",
    "download_url": "https://raw.githubusercontent.com/Garvit244/Leetcode/master/1-100q/06.py",
    "size_bytes": 923,
    "code": "'''\n\tThe string \"PAYPALISHIRING\" is written in a zigzag pattern on a given number of rows like this: (you may want to display this pattern in a fixed font for better legibility)\n\n\tP   A   H   N\n\tA P L S I I G\n\tY   I   R\n\n\tAnd then read line by line: \"PAHNAPLSIIGYIR\"\n'''\n\nclass Solution(object):\n    def convert(self, s, numRows):\n        \"\"\"\n        :type s: str\n        :type numRows: int\n        :rtype: str\n        \"\"\"\n        \n        if numRows == 1:\n        \treturn s\n\n        result = [\"\" for _ in range(numRows)]\n        row, down = 0, 1\n        for char in s:\n        \tresult[row] += char\n\n        \tif row == numRows - 1:\n        \t\tdown = 0\n        \tif row == 0:\n        \t\tdown = 1\n\n        \tif down:\n        \t\trow += 1\n        \telse:\n        \t\trow -= 1\n        final_string = \"\"\n        for value in result:\n        \tfinal_string += value\n        return final_string\n\nprint Solution().convert(\"PAYPALISHIRING\",3)",
    "cleaned_code": "class Solution(object):\n\n    def convert(self, s, numRows):\n        if numRows == 1:\n            return s\n        result = ['' for _ in range(numRows)]\n        row, down = (0, 1)\n        for char in s:\n            result[row] += char\n            if row == numRows - 1:\n                down = 0\n            if row == 0:\n                down = 1\n            if down:\n                row += 1\n            else:\n                row -= 1\n        final_string = ''\n        for value in result:\n            final_string += value\n        return final_string\nprint(Solution().convert('PAYPALISHIRING', 3))"
  }
]