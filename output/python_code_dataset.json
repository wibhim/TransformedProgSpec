[
  {
    "repo": "Garvit244/Leetcode",
    "file_path": "1091.py",
    "file_name": "1091.py",
    "download_url": "https://raw.githubusercontent.com/Garvit244/Leetcode/master/1091.py",
    "size_bytes": 1654,
    "code": "'''\nIn an N by N square grid, each cell is either empty (0) or blocked (1).\n\nA clear path from top-left to bottom-right has length k if and only if it is composed of cells C_1, C_2, ..., C_k such that:\n\nAdjacent cells C_i and C_{i+1} are connected 8-directionally (ie., they are different and share an edge or corner)\nC_1 is at location (0, 0) (ie. has value grid[0][0])\nC_k is at location (N-1, N-1) (ie. has value grid[N-1][N-1])\nIf C_i is located at (r, c), then grid[r][c] is empty (ie. grid[r][c] == 0).\nReturn the length of the shortest such clear path from top-left to bottom-right.  If such a path does not exist, return -1.\n\n \n\nExample 1:\n\nInput: [[0,1],[1,0]]\nOutput: 2\nExample 2:\n\nInput: [[0,0,0],[1,1,0],[1,1,0]]\nOutput: 4\n \n\nNote:\n\n1 <= grid.length == grid[0].length <= 100\ngrid[r][c] is 0 or 1\n'''\nclass Solution(object):\n    def shortestPathBinaryMatrix(self, grid):\n        \"\"\"\n        :type grid: List[List[int]]\n        :rtype: int\n        \"\"\"\n        if not grid:\n            return -1\n        \n        rows, cols = len(grid), len(grid[0])\n        if grid[0][0] or grid[rows-1][cols-1]:\n            return -1\n        \n        queue = [[0, 0, 1]]\n        for row, col, dist in queue:\n            if row == rows-1 and col == cols-1:\n                return dist\n            for di, dj in [(-1, -1), (0, -1), (-1, 1), (-1, 0), (1, 0), (1, -1), (0, 1), (1, 1)]:\n                n_row, n_col = row + di, col + dj\n                if 0 <= n_row < rows and 0 <= n_col < cols and not grid[n_row][n_col]:\n                    grid[n_row][n_col] = 1\n                    queue.append([n_row, n_col, dist + 1])\n                    \n        return -1\n"
  },
  {
    "repo": "Garvit244/Leetcode",
    "file_path": "1-100q/03.py",
    "file_name": "03.py",
    "download_url": "https://raw.githubusercontent.com/Garvit244/Leetcode/master/1-100q/03.py",
    "size_bytes": 768,
    "code": "'''\n\tGiven a string, find the length of the longest substring without repeating characters.\n\n\tExamples:\n\n\tGiven \"abcabcbb\", the answer is \"abc\", which the length is 3.\n\n\tGiven \"bbbbb\", the answer is \"b\", with the length of 1.\n\n\tGiven \"pwwkew\", the answer is \"wke\", with the length of 3. Note that the answer must be a substring, \"pwke\" is a subsequence and not a substring.\n'''\n\nclass Solution(object):\n    def lengthOfLongestSubstring(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        mapSet = {}\n        start, result = 0, 0\n\n        for end in range(len(s)):\n        \tif s[end] in mapSet:\n        \t\tstart = max(mapSet[s[end]], start)\n        \tresult = max(result, end-start+1)\n        \tmapSet[s[end]] = end+1\n\n        return result "
  },
  {
    "repo": "Garvit244/Leetcode",
    "file_path": "1-100q/05.py",
    "file_name": "05.py",
    "download_url": "https://raw.githubusercontent.com/Garvit244/Leetcode/master/1-100q/05.py",
    "size_bytes": 1852,
    "code": "'''\n\tGiven a string s, find the longest palindromic substring in s. You may assume that the maximum length of s is 1000.\n\n\tExample 1:\n\n\tInput: \"babad\"\n\tOutput: \"bab\"\n\tNote: \"aba\" is also a valid answer.\n\tExample 2:\n\n\tInput: \"cbbd\"\n\tOutput: \"bb\"\n'''\n\nclass Solution(object):\n    def longestPalindrome(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        dp = [[0 for _ in range(len(s))] for _ in range(len(s))]\n        maxLength, result = 1, \"\"\n        for index in range(len(s)):\n        \tdp[index][index] = 1\n        \tresult = s[index]\n\n        length = 2\n        \n        while length <= len(s):\n        \tindex_i = 0\n        \twhile index_i < len(s) - length + 1:\n        \t\tindex_j = index_i + length -1\n\n        \t\tif length == 2 and s[index_i] == s[index_j]:\n        \t\t\tdp[index_i][index_j] = 1\n        \t\t\tmaxLength = max(maxLength, 2)\n        \t\t\tresult = s[index_i:index_j+1]\n        \t\telif s[index_i] == s[index_j] and dp[index_i+1][index_j-1]:\n        \t\t\tdp[index_i][index_j] = 1\n        \t\t\tif length > maxLength:\n        \t\t\t\tmaxLength = length\n        \t\t\t\tresult = s[index_i:index_j+1]\n\n        \t\tindex_i += 1\n        \tlength += 1\n\n        return result\n\n# Space: O(N^2)\n# Time: O(N^2)\n\nclass Solution(object):\n    def longestPalindrome(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n\n        def expand(s, left, right):\n        \twhile left >= 0 and right < len(s) and s[left] == s[right]:\n        \t\tleft -= 1\n        \t\tright += 1\n        \treturn right-left-1\n\n        start, end = 0, 0\n        for index in range(len(s)):\n        \teven_len = expand(s, index, index+1)\n        \todd_len = expand(s, index, index)\n        \tlength = max(even_len, odd_len)\n        \tif length > (end-start):\n        \t\tstart = index - (length-1)/2\n        \t\tend = index +length/2\n\n        return s[start:end+1]"
  },
  {
    "repo": "Garvit244/Leetcode",
    "file_path": "1-100q/06.py",
    "file_name": "06.py",
    "download_url": "https://raw.githubusercontent.com/Garvit244/Leetcode/master/1-100q/06.py",
    "size_bytes": 923,
    "code": "'''\n\tThe string \"PAYPALISHIRING\" is written in a zigzag pattern on a given number of rows like this: (you may want to display this pattern in a fixed font for better legibility)\n\n\tP   A   H   N\n\tA P L S I I G\n\tY   I   R\n\n\tAnd then read line by line: \"PAHNAPLSIIGYIR\"\n'''\n\nclass Solution(object):\n    def convert(self, s, numRows):\n        \"\"\"\n        :type s: str\n        :type numRows: int\n        :rtype: str\n        \"\"\"\n        \n        if numRows == 1:\n        \treturn s\n\n        result = [\"\" for _ in range(numRows)]\n        row, down = 0, 1\n        for char in s:\n        \tresult[row] += char\n\n        \tif row == numRows - 1:\n        \t\tdown = 0\n        \tif row == 0:\n        \t\tdown = 1\n\n        \tif down:\n        \t\trow += 1\n        \telse:\n        \t\trow -= 1\n        final_string = \"\"\n        for value in result:\n        \tfinal_string += value\n        return final_string\n\nprint Solution().convert(\"PAYPALISHIRING\",3)"
  },
  {
    "repo": "Garvit244/Leetcode",
    "file_path": "1-100q/10.py",
    "file_name": "10.py",
    "download_url": "https://raw.githubusercontent.com/Garvit244/Leetcode/master/1-100q/10.py",
    "size_bytes": 1374,
    "code": "'''\n\tGiven an input string (s) and a pattern (p), implement regular expression matching with support for '.' and '*'.\n\n\t'.' Matches any single character.\n\t'*' Matches zero or more of the preceding element.\n\tThe matching should cover the entire input string (not partial).\n\n\tNote:\n\n\ts could be empty and contains only lowercase letters a-z.\n\tp could be empty and contains only lowercase letters a-z, and characters like . or *.\n'''\n\nclass Solution(object):\n    def isMatch(self, s, p):\n        \"\"\"\n        :type s: str\n        :type p: str\n        :rtype: bool\n        \"\"\"\n        dp = [[False for _ in range(len(p) + 1)] for _ in range(len(s) + 1)]\n        dp[0][0] = True\n\n \t\tfor index in range(1, len(dp[0])):\n            if p[index-1] == '*':\n                dp[0][index] = dp[0][index - 2]\n                \n        for index_i in range(1, len(dp)):\n        \tfor index_j in range(1, len(dp[0])):\n        \t\tif s[index_i - 1] == p[index_j - 1] or p[index_j - 1] == '.':\n        \t\t\tdp[index_i][index_j] = dp[index_i-1][index_j-1]\n        \t\telif p[index_j-1] == '*':\n        \t\t\tdp[index_i][index_j] = dp[index_i][index_j-2]\n\n        \t\t\tif s[index_i-1] == p[index_j-2] or p[index_j-2] == '.':\n        \t\t\t\tdp[index_i][index_j] = dp[index_i-1][index_j] or dp[index_i][index_j]\n\n        \t\telse:\n        \t\t\tdp[index_i][index_j] = False\n\n\n        return dp[len(s)][len(p)]\n        "
  },
  {
    "repo": "Garvit244/Leetcode",
    "file_path": "1-100q/11.py",
    "file_name": "11.py",
    "download_url": "https://raw.githubusercontent.com/Garvit244/Leetcode/master/1-100q/11.py",
    "size_bytes": 818,
    "code": "'''\n\tGiven n non-negative integers a1, a2, ..., an, where each represents a point at coordinate (i, ai). n vertical lines are drawn such that the two endpoints of line i is at (i, ai) and (i, 0). Find two lines, which together with x-axis forms a container, such that the container contains the most water.\n\n\tNote: You may not slant the container and n is at least 2.\n\n'''\n\nclass Solution(object):\n    def maxArea(self, height):\n        \"\"\"\n        :type height: List[int]\n        :rtype: int\n        \"\"\"\n        left, right, maxArea = 0, len(height) - 1, 0 \n\n        while left < right:\n        \tmaxArea = max(maxArea, min(height[left], height[right])*(right-left))\n        \tif height[left] < height[right]:\n        \t\tleft += 1\n        \telse:\n        \t\tright -= 1\n\n        return maxArea \n\n# Space : O(1)\n# Time: O(N)"
  },
  {
    "repo": "Garvit244/Leetcode",
    "file_path": "1-100q/14.py",
    "file_name": "14.py",
    "download_url": "https://raw.githubusercontent.com/Garvit244/Leetcode/master/1-100q/14.py",
    "size_bytes": 1243,
    "code": "'''\nWrite a function to find the longest common prefix string amongst an array of strings.\n\nIf there is no common prefix, return an empty string \"\".\n\nExample 1:\n\nInput: [\"flower\",\"flow\",\"flight\"]\nOutput: \"fl\"\nExample 2:\n\nInput: [\"dog\",\"racecar\",\"car\"]\nOutput: \"\"\nExplanation: There is no common prefix among the input strings.\nNote:\n\nAll given inputs are in lowercase letters a-z.\n'''\n\nclass Solution(object):\n    def longestCommonPrefix(self, strs):\n        \"\"\"\n        :type strs: List[str]\n        :rtype: str\n        \"\"\"\n        def prefix(strs, index):\n            check_prefix = strs[0][:index]\n            for index in range(1, len(strs)):\n                if not strs[index].startswith(check_prefix):\n                    return False\n            return True\n                \n                    \n        if not strs:\n            return \"\"\n        \n        minLength = float('inf')\n        for string in strs:\n            minLength = min(minLength, len(string))\n            \n        low, high = 0, minLength\n        \n        while low <= high:\n            mid = (low+high)/2\n            if (prefix(strs, mid)):\n                low = mid + 1\n            else:\n                high = mid - 1\n        \n        return strs[0][:(low+high)/2]\n"
  },
  {
    "repo": "Garvit244/Leetcode",
    "file_path": "1-100q/15.py",
    "file_name": "15.py",
    "download_url": "https://raw.githubusercontent.com/Garvit244/Leetcode/master/1-100q/15.py",
    "size_bytes": 1159,
    "code": "'''\n\tGiven an array nums of n integers, are there elements a, b, c in nums such that a + b + c = 0? Find all unique triplets in the array which gives the sum of zero.\n\n\tNote:\n\n\tThe solution set must not contain duplicate triplets.\n\n\tExample:\n\n\tGiven array nums = [-1, 0, 1, 2, -1, -4],\n\n\tA solution set is:\n\t[\n\t  [-1, 0, 1],\n\t  [-1, -1, 2]\n\t]\n'''\nclass Solution(object):\n    def threeSum(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        nums.sort()\n\n        if (len(nums) >= 3) and (nums[0] == nums[len(nums) -1]) and (nums[0] == 0):\n            return [[0, 0, 0]]\n\n        result = []\n        for index in range(len(nums) - 1):\n        \tleft = index+1\n        \tright = len(nums) - 1\n\n        \twhile left < right:\n        \t\tcurrSum = nums[index] + nums[left] + nums[right]\n        \t\tif currSum == 0:\n        \t\t\tresult.append([nums[index], nums[left], nums[right]])\n        \t\t\tleft += 1\n        \t\t\tright -= 1\n        \t\telif currSum < 0:\n        \t\t\tleft += 1\n        \t\telse:\n        \t\t\tright -= 1\n        return  [list(t) for t in set(tuple(element) for element in result)]\n\n# Space: O(1)\n# Time: O(N^2)"
  },
  {
    "repo": "Garvit244/Leetcode",
    "file_path": "1-100q/16.py",
    "file_name": "16.py",
    "download_url": "https://raw.githubusercontent.com/Garvit244/Leetcode/master/1-100q/16.py",
    "size_bytes": 1111,
    "code": "'''\n\tGiven an array nums of n integers and an integer target, find three integers in nums such that the sum is closest to target. Return the sum of the three integers. You may assume that each input would have exactly one solution.\n\n\tExample:\n\n\tGiven array nums = [-1, 2, 1, -4], and target = 1.\n\n\tThe sum that is closest to the target is 2. (-1 + 2 + 1 = 2).\n'''\n\nclass Solution(object):\n    def threeSumClosest(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: int\n        \"\"\"\n        \n        nums.sort()\n        result, min_diff = 0, float('inf')\n\n        for index in range(len(nums)-1):\n        \tleft = index + 1\n        \tright = len(nums) - 1\n\n        \twhile left < right:\n        \t\tcurrSum = nums[index] + nums[left] + nums[right]\n        \t\tdiff = abs(target - currSum)\n\n        \t\tif diff == 0:\n        \t\t\treturn target\n        \t\tif diff < min_diff:\n        \t\t\tmin_diff = diff\n        \t\t\tresult = currSum\n\n        \t\tif currSum < target:\n        \t\t\tleft += 1\n        \t\telse:\n        \t\t\tright -= 1\n        return result\n\n\n# Space: O(1)\n# Time: O(N^2)"
  },
  {
    "repo": "Garvit244/Leetcode",
    "file_path": "1-100q/17.py",
    "file_name": "17.py",
    "download_url": "https://raw.githubusercontent.com/Garvit244/Leetcode/master/1-100q/17.py",
    "size_bytes": 1026,
    "code": "'''\n\tGiven a string containing digits from 2-9 inclusive, return all possible letter combinations that the number could represent.\n\n\tA mapping of digit to letters (just like on the telephone buttons) is given below. Note that 1 does not map to any letters.\n'''\n\nclass Solution(object):\n    def letterCombinations(self, digits):\n        \"\"\"\n        :type digits: str\n        :rtype: List[str]\n        \"\"\"\n        \n        phoneMap = { '2': 'abc', '3': 'def', '4': 'ghi', '5': 'jkl', '6': 'mno', '7' : 'pqrs', '8': 'tuv', '9':'wxyz'}\n        number = str(digits)\n\n        if number == \"\":\n        \treturn []\n\n        result = ['']\n        for char in number:\n        \tvalues = phoneMap[char]\n        \tnew_result = []\n        \tfor prefix in result:\n        \t\tcurrElement = prefix\n        \t\tfor value in values:\n        \t\t\tnew_result.append(currElement+value)\n\n        \tresult = new_result\n        \t# result = [prefix+value for prefix in result for value in values]\n        return result\n\nprint Solution().letterCombinations(\"23\")"
  }
]